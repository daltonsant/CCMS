// <auto-generated />
using System;
using CCMS.NEOPE.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CCMS.NEOPE.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221122203817_RefactorTasksAndPendencies_v1")]
    partial class RefactorTasksAndPendencies_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountableTaskItem", b =>
                {
                    b.Property<ulong>("AssignedTasksId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("AssigneesId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("AssignedTasksId", "AssigneesId");

                    b.HasIndex("AssigneesId");

                    b.ToTable("AccountableTaskItem");
                });

            modelBuilder.Entity("AssetProject", b =>
                {
                    b.Property<ulong>("AssetsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProjectsId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("AssetsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("AssetProject");
                });

            modelBuilder.Entity("AssetTaskItem", b =>
                {
                    b.Property<ulong>("AssetsId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TasksId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("AssetsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("AssetTaskItem");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Accountable", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Sector")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Accountables", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Asset", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<ulong>("TypeId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.AssetType", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AssetTypes", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Attachment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<ulong?>("TaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Attachments", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8852),
                            Name = "Civil"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8856),
                            Name = "Eletromecânico"
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8858),
                            Name = "Aterramento"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8860),
                            Name = "Projeto"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8861),
                            Name = "Painéis"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8863),
                            Name = "Equipamentos"
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8864),
                            Name = "Interligações"
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(8866),
                            Name = "SPCS"
                        });
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.CheckListItem", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Value")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("CheckListItems", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Comment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<ulong?>("TaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Labels", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.LinkedTasks", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("ObjectTaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<ulong>("SubjectTaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTaskId");

                    b.HasIndex("SubjectTaskId");

                    b.ToTable("LinkedTasks", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Project", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Steps", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7848),
                            Name = "Planejamento"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7860),
                            Name = "TAC Equip. Interlig."
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7862),
                            Name = "TAF SPCS"
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7863),
                            Name = "TAC SPCS"
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7865),
                            Name = "Energização"
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 957, DateTimeKind.Local).AddTicks(7866),
                            Name = "SAP"
                        });
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.TaskItem", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<ulong?>("ParentTaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<ulong>("ProjectId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ReporterId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SapNoteNumber")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<ulong>("TypeId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StepId");

                    b.HasIndex("TypeId");

                    b.ToTable("TaskItems", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.TaskLog", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<ulong?>("TaskId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskLogs", (string)null);
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Type", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(7571),
                            Name = "Informativo"
                        },
                        new
                        {
                            Id = 2ul,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(7588),
                            Name = "Acompanhamento"
                        },
                        new
                        {
                            Id = 3ul,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(7591),
                            Name = "Pendência não impeditiva"
                        },
                        new
                        {
                            Id = 4ul,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(7592),
                            Name = "Pendência impeditiva"
                        },
                        new
                        {
                            Id = 5ul,
                            CreateDate = new DateTime(2022, 11, 22, 17, 38, 16, 986, DateTimeKind.Local).AddTicks(7594),
                            Name = "Não conformidade"
                        });
                });

            modelBuilder.Entity("CCMS.NEOPE.Infra.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("ApplicationRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c844e220-6e6e-4b70-b0fe-4eb3e96e45cc",
                            ConcurrencyStamp = "992ae190-9caf-4008-8d3e-62281c629a1d",
                            Description = "Administrador do sistema",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2f892af8-b3dc-4160-b348-0f9e07b35c60",
                            ConcurrencyStamp = "0bd20131-9282-4e5c-85e9-83c78660b4bf",
                            Description = "Usuário comum do sistema",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CCMS.NEOPE.Infra.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<ulong>("AccountableId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFirstAccess")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountableId")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("ApplicationUsers", (string)null);
                });

            modelBuilder.Entity("LabelTaskItem", b =>
                {
                    b.Property<int>("LabelsId")
                        .HasColumnType("int");

                    b.Property<ulong>("TasksId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("LabelsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("LabelTaskItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AccountableTaskItem", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("AssignedTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Accountable", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetProject", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssetTaskItem", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Asset", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.AssetType", "Type")
                        .WithMany("AssetsByType")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.CheckListItem", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "Task")
                        .WithMany("CheckListItems")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Comment", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId");

                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.LinkedTasks", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "ObjectTask")
                        .WithMany("LinkedObjectTasks")
                        .HasForeignKey("ObjectTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "SubjectTask")
                        .WithMany("LinkedSubjectTasks")
                        .HasForeignKey("SubjectTaskId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ObjectTask");

                    b.Navigation("SubjectTask");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.TaskItem", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.Category", "Category")
                        .WithMany("TaskItemsByCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Accountable", "Reporter")
                        .WithMany("ReportedTasks")
                        .HasForeignKey("ReporterId");

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Step", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.Type", "Type")
                        .WithMany("TaskItemsByType")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");

                    b.Navigation("Reporter");

                    b.Navigation("Step");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.TaskLog", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", "Task")
                        .WithMany("Logs")
                        .HasForeignKey("TaskId");

                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCMS.NEOPE.Infra.Identity.ApplicationUser", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.Accountable", "Accountable")
                        .WithOne("User")
                        .HasForeignKey("CCMS.NEOPE.Infra.Identity.ApplicationUser", "AccountableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accountable");
                });

            modelBuilder.Entity("LabelTaskItem", b =>
                {
                    b.HasOne("CCMS.NEOPE.Domain.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Domain.Entities.TaskItem", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CCMS.NEOPE.Infra.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Accountable", b =>
                {
                    b.Navigation("ReportedTasks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.AssetType", b =>
                {
                    b.Navigation("AssetsByType");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Category", b =>
                {
                    b.Navigation("TaskItemsByCategory");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.TaskItem", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CheckListItems");

                    b.Navigation("ChildTasks");

                    b.Navigation("Comments");

                    b.Navigation("LinkedObjectTasks");

                    b.Navigation("LinkedSubjectTasks");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("CCMS.NEOPE.Domain.Entities.Type", b =>
                {
                    b.Navigation("TaskItemsByType");
                });

            modelBuilder.Entity("CCMS.NEOPE.Infra.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
